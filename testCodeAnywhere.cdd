/*
	Initialize an array that holds each read,
	use event handling to determine if each hit corresponds to a correct button

	NOTES:
		- switch case structure? to compare one by one for the length
		- possibly want to add a Serial.print function for debugging??
		- sizeof() determines the number of BYTES, not ints.... solvable
		
	Steps to Simon Says:
			1) create a random number
			2) convert number to a corresponding button/led
			3) play the led array in order
			4) blink all three leds to indicate finishing play, initiate listen
			5) while loop listen i.e. while number of presses < length of button arrray
			6) within while nest a case structure to compare each press to array elemnt
			7) if 
CAN YOU READ THIS
I REALLY like turtles
fbhdajbfdhsabfbafbsdabfda
*/

int led1				= 0;		// this is the pin of the first led
int led2				= 0;		// this is the pin of the second led
int led3				= 0;		// this is the pin of the third led
int buttonArray	= [];		// this array contains each button/led to be played
int userArray		=[];
int inputCount		= 0;		// this counts the number of button presses from the user
int arraySize		= 0;		// this stores the current size of buttonArray
int but1				=0;
int but2				=0;		// these designate the pins that each button is connected to
int but3				=0;


void setup() {
	
	pinMode(led1,OUTPUT);	
	pinMode(led2,OUTPUT);		// set the pinmodes for each led to be played
	pinMode(led3,OUTPUT);
	pinMode(but1,INPUT);
	pinMode(but2,INPUT);
	pinMode(but3,INPUT);
  
  delay(1000);
}

void loop() {	// main loop code
  
  int newNumber = random(1,4);								// generates a random number between 1 and 3 (yes we need a 4 here)
  buttonArray = [buttonArray, newNumber];					// adds the random number to the button array	
  int arrayLength = length(buttonArray,newNumber);					//determine number of integers in array
  
  delay(500);
  
  int playCounter;
  for (playCounter=0; playCounter < (arrayLength-1)) {		// this for loop blinks each led in the arraySize
															// until all leds in the array have been played
	  switch(buttonArray[playCounter]) {	
		  case 1:
			// blink led 1, wait
			analogWrite(led1, HIGH);
			delay(200);
			analogWrite(led1,LOW);
			delay(200);			
			break;
			
		  case 2:
			// blink led 2, wait
			analogWrite(led2,HIGH);
			delay(200);
			analogWrite(led2,LOW);
			delay(200);
			break;
			
		  case 3:
			// blink led 3, wait
			analogWrite(led3,HIGH);
			delay(200);
			analogWrite(led3,LOW);
			delay(200);
			break;
			
		  default:
			// blink all three quickly if case this doesnt work?
			analogWrite(led1,HIGH);
			analogWrite(led2,HIGH);
			analogWrite(led3,HIGH);
			delay(100);
			analogWrite(led1,LOW);
			analogWrite(led2,LOW);
			analogWrite(led3,LOW);
			delay(100);
			break;
	  }
	  
  }
  
  analogWrite(led1,HIGH);
  analogWrite(led2,HIGH);
  analogWrite(led3,HIGH);
  delay(200);						// Blink all three leds slowly to indicate start of player's turn !!!!SUBROUTINE!!!!
  analogWrite(led2,LOW);
  analogWrite(led3,LOW);
  delay(200);
  
   keepLooping = 0;
  int alreadyPressed = 0;
  inputCount = 0;
  while (keepLooping<(arrayLength-1)) {
	  int but1State = digitalRead(but1);
	  int but2State = digitalRead(but2);
	  int but3State = digitalRead(but3);
	  
	  if ((but1State==HIGH) && (alreadyPressed!=1)) {
		  userArray = [userArray, 1];
		  alreadyPressed = 1;
      keepLooping = keepLooping+1;
	  } else if ((but2State==HIGH) && (alreadyPressed!=2)) {
		  userArray = [userArray, 2];
		  alreadyPressed = 2;
      keepLooping=keepLooping+1;
	  } else if ((but3State == HIGH) && (alreadyPressed!=3)) {
		  userArray = [userArray,3];
      keepLooping=keepLooping+1;
	  } else {
		  // do nothing if no buttons are pressed
	  }
	  
	  //check to see if it should keep looping
	  int userArraySize = length(userArray);
	  if (userArraySize == arrayLength) {
		  keepLooping = false;
	  } else {
		  // keep looping if the arrays are not the same size		  
	  }
	  
		  
  }
  
  // now we need to compare the userArray with the buttonArray
  
  int compareCounter = 0;
  for (compareCounter< (arrayLength-1)) {
    if 
  }
  
  
}


int length(array, randomInt) {
	  int numberInts = sizeof(array)/sizeof(randomInt);
	  return numberInts;
}


